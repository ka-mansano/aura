Component
<aura:component implements="flexipage:availableForAllPageTypes" access="global" >
    <aura:attribute name="input1" type="integer" default=""/>
    <aura:attribute name="input2" type="integer" default=""/>
    <aura:attribute name="output" type="integer" default=""/>
    <aura:attribute name="showOutput" type="boolean" default="false"/>
    <div class="mainContainer">
        <h1 class="slds-text-heading_large">Calculator</h1>  <br/>
            <lightning:input label="Enter First Number" aura:Id="num1" value="{!v.input1}" placeholder="0" /><br/>
            <lightning:input label="Enter Second Number" aura:Id="num2" value="{!v.input2}" placeholder="0" /><br/>
        <div class="btnContainer">
            <lightning:button variant="brand" label="Add" onclick="{!c.addNum}" /> &nbsp; &nbsp; &nbsp;
            <lightning:button variant="brand" label="Subtract" onclick="{!c.subNum}"  /> &nbsp; &nbsp; &nbsp;
            <lightning:button variant="brand" label="Multiply" onclick="{!c.multNum}" /> &nbsp; &nbsp; &nbsp;
            <lightning:button variant="brand" label="Divide" onclick="{!c.divNum}"  /><br/>
        </div>
            <aura:if isTrue="{!v.showOutput}">
                    <span class="outputContainer"><b>Answer : {!v.output}</b>&nbsp; &nbsp; &nbsp;
                    <lightning:button  class="slds-button slds-button_text-destructive" label="Reset" onclick="{!c.resetForm}"  /></span>
            </aura:if>
    </div>
</aura:component>

Controller
({
    addNum : function(component, event, helper) {
        var res = helper.getValues(component, 'add');
        if(isNaN(res)){ //isnan(2)= false ->!false->true
            helper.errorHandler(component, 'error');
            return null;
        }   
        helper.setResults(component, res);
    },
    
    subNum : function(component, event, helper) {
        var res = helper.getValues(component, 'sub');
        if(isNaN(res)){ 
            helper.errorHandler(component, 'error');
            return null;
        }  
        helper.setResults(component, res);
    },
     multNum : function(component, event, helper) {
        var res = helper.getValues(component, 'multiply');
        if(isNaN(res)){
            helper.errorHandler(component,'error');
            return null;
        }  
        helper.setResults(component, res);
    },
    divNum : function(component, event, helper) {
        var res = helper.getValues(component, 'divide');
        if(parseInt(component.find('num2').get('v.value')) === 0){
            helper.errorHandler(component, 'error');
            return null;
        }
         if(isNaN(res)){
            helper.errorHandler(component);
            return null;
        }   
        
        helper.setResults(component, res); 
    },
    resetForm : function(component, event, helper){
        helper.errorHandler(component, 'reset');
    }
})

Helper
({
    getValues : function(component, opt) {
        const nums= [];
        nums[0] = parseInt(component.find('num1').get('v.value'));
        nums[1] = parseInt(component.find('num2').get('v.value'));
        if(opt === 'add')
           return (nums[0]+nums[1]);
        if(opt === 'sub')
           return (nums[0]-nums[1]);
        if(opt === 'multiply')
           return (nums[0]*nums[1]);
        if(opt === 'divide')
           return (nums[0]/nums[1]);
    },
    setResults : function(component, res){
        component.set('v.output', res);
        component.set('v.showOutput', true);
    },
    errorHandler : function(component, task){
        if(task === 'error')
        alert('Enter the Valid number');
        component.set('v.input1','');
        component.set('v.input2','');
        component.set('v.showOutput', false);
    }
})
